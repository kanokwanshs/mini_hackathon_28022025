# -*- coding: utf-8 -*-
"""mini_hackathon_28022025

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rNhonl-GFTw4suyObmSOF0m6e9-Zcm7r
"""

import pandas as pd
import statsmodels.api as sm

# Load the dataset
file_path = "/content/insurance.csv"
df = pd.read_csv(file_path)

# Convert categorical variables to dummy variables
df = pd.get_dummies(df, columns=['sex', 'smoker', 'region'], drop_first=True)

# Define independent (X) and dependent (Y) variables
X = df[['age', 'bmi', 'children', 'smoker_yes', 'region_southeast', 'region_northwest', 'region_southwest']]
X = sm.add_constant(X)  # Add intercept term
y = df['charges']

# Convert X to float
X = X.astype(float)

# Fit the regression model
model = sm.OLS(y, X).fit()

# Print the regression summary
print(model.summary())

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Load the dataset
file_path = "/content/insurance.csv"
df = pd.read_csv(file_path)

# Encode categorical variables
df_encoded = pd.get_dummies(df, columns=['sex', 'smoker', 'region'], drop_first=True)

# Split features and target
X = df_encoded.drop(columns=['charges'])
y = df_encoded['charges']

# Standardize numerical features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split dataset into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Train a Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Evaluate the model
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

# Print results
print(f"Mean Absolute Error (MAE): {mae:.2f}")
print(f"Root Mean Squared Error (RMSE): {rmse:.2f}")
print(f"R² Score: {r2:.4f}")

# Scatter plot: Actual vs. Predicted values
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, alpha=0.5, label="Predicted vs Actual")
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--', label="Perfect Fit")
plt.xlabel("Actual Charges")
plt.ylabel("Predicted Charges")
plt.title("Actual vs Predicted Charges (Linear Regression)")
plt.legend()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# โหลดข้อมูล
file_path = "/content/TelcoCustomers.csv"
df = pd.read_csv(file_path)

# แสดงข้อมูลตัวอย่าง
print(df.head())

# ตรวจสอบข้อมูลหาย
print(df.isnull().sum())

# ลบคอลัมน์ที่ไม่จำเป็น เช่น 'customerID' และ 'PhoneNumber' (ถ้ามี)
df = df.drop(columns=['phone number'], errors='ignore')

# เลือก features และ target (ตรวจสอบชื่อคอลัมน์ให้แน่ใจว่าไม่มีช่องว่าง)
df.columns = df.columns.str.strip()
X = df.drop(columns=['churn'])
y = df['churn']

# แปลง target เป็นตัวเลข
le = LabelEncoder()
y = le.fit_transform(y)

# แปลง categorical features เป็นตัวเลข (One-Hot Encoding)
X = pd.get_dummies(X, drop_first=True)

# แบ่งข้อมูล train/test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardization
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train Classification Model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predict
y_pred = model.predict(X_test)

# Evaluate Model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy}')
print('Classification Report:\n', classification_report(y_test, y_pred))
conf_matrix = confusion_matrix(y_test, y_pred)
print('Confusion Matrix:\n', conf_matrix)

# Visualization
plt.figure(figsize=(6, 5))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['No Churn', 'Churn'], yticklabels=['No Churn', 'Churn'])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

